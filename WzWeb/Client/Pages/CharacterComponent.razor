@page "/character"
@using Blazor.Extensions.Canvas.Canvas2D
@using System.Drawing
@using System.Threading
@implements IDisposable
@inject INotifierService Notifier

@if (IsInit)
{
    <Loading></Loading>
}
else
{
    <div class="d-none">
        <img src="data:image/png;base64,@(character.Head.PngInfo.Base64Data)" class="card-img" alt="..." style="width:@(character.Head.PngInfo.Width + "px");height:@(character.Head.PngInfo.Height + "px")" @ref="HeadRef" />
        <img src="data:image/png;base64,@(character.Body.PngInfo.Base64Data)" class="card-img" alt="..." style="width:@(character.Body.PngInfo.Width + "px");height:@(character.Body.PngInfo.Height + "px")" @ref="BodyRef" />
        <img src="data:image/png;base64,@(character.Face.PngInfo.Base64Data)" class="card-img" alt="..." style="width:@(character.Face.PngInfo.Width + "px");height:@(character.Face.PngInfo.Height + "px")" @ref="FaceRef" />
        @switch (character.EarType)
        {
            case EarType.Ear:
                <img src="data:image/png;base64,@(character.Ear.PngInfo.Base64Data)" class="card-img" alt="..." style="width:@(character.Ear.PngInfo.Width + "px");height:@(character.Ear.PngInfo.Height + "px")" @ref="EarRef" />
                break;
            case EarType.LefEar:
                <img src="data:image/png;base64,@(character.LefEar.PngInfo.Base64Data)" class="card-img" alt="..." style="width:@(character.LefEar.PngInfo.Width + "px");height:@(character.LefEar.PngInfo.Height + "px")" @ref="EarRef" />
                break;
            case EarType.HighLefEar:
                <img src="data:image/png;base64,@(character.HighLefEar.PngInfo.Base64Data)" class="card-img" alt="..." style="width:@(character.HighLefEar.PngInfo.Width + "px");height:@(character.HighLefEar.PngInfo.Height + "px")" @ref="EarRef" />
                break;
            default:
                break;
        }
        @if (character.Arm != null)
        {
            <img src="data:image/png;base64,@(character.Arm.PngInfo.Base64Data)" class="card-img" alt="..." style="width:@(character.Arm.PngInfo.Width + "px");height:@(character.Arm.PngInfo.Height + "px")" @ref="ArmRef" />
        }
        @if (character.Hand != null)
        {
            <img src="data:image/png;base64,@(character.Hand.PngInfo.Base64Data)" class="card-img" alt="..." style="width:@(character.Hand.PngInfo.Width + "px");height:@(character.Hand.PngInfo.Height + "px")" @ref="HandRef" />
        }
        @if (character.Hair != null)
        {
            <img src="data:image/png;base64,@(character.Hair.PngInfo.Base64Data)" class="card-img" alt="..." style="width:@(character.Hair.PngInfo.Width + "px");height:@(character.Hair.PngInfo.Height + "px")" @ref="HairRef" />
        }
        @if (character.HairOverHead != null)
        {
            <img src="data:image/png;base64,@(character.HairOverHead.PngInfo.Base64Data)" class="card-img" alt="..." style="width:@(character.HairOverHead.PngInfo.Width + "px");height:@(character.HairOverHead.PngInfo.Height + "px")" @ref="HairOverHeadRef" />
        }
        @if (character.HairBelowBody != null)
        {
            <img src="data:image/png;base64,@(character.HairBelowBody.PngInfo.Base64Data)" class="card-img" alt="..." style="width:@(character.HairBelowBody.PngInfo.Width + "px");height:@(character.HairBelowBody.PngInfo.Height + "px")" @ref="HairBelowBodyRef" />
        }

    </div>

    <div class="row">
        <div class="col-12">
            <div class="d-flex flex-column mb-3 justify-content-center align-items-center">
                <div class="p-2">
                    <div class="d-flex flex-row mb-3">
                        <div class="p-2 ">
                            <div class="input-group mb-3">
                                <div class="input-group-prepend">
                                    <label class="input-group-text" for="inputGroupSelect01">角色皮肤</label>
                                </div>
                                <select class="custom-select" id="inputGroupSelect01" style="width:150px" @onchange="ChangeSkin">
                                    @for (int i = 0; i < Skins.Count; i++)
                                    {
                                        var index = i;
                                        if (index == 0)
                                        {
                                            <option value="@Skins[index]">@Skins[index]</option>
                                        }
                                        else
                                        {
                                            <option value="@Skins[index]">@Skins[index]</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="p-2">
                            <div class="input-group mb-3">
                                <div class="input-group-prepend">
                                    <label class="input-group-text" for="inputGroupSelect01">角色动作</label>
                                </div>
                                <select class="custom-select" id="inputGroupSelect01" style="width:150px;" @onchange="ChangeAction">
                                    @for (int i = 0; i < Actions.Count; i++)
                                    {
                                        var index = i;
                                        if (index == 0)
                                        {
                                            <option value="@Actions[index]">@Actions[index]</option>
                                        }
                                        else
                                        {
                                            <option value="@Actions[index]">@Actions[index]</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="p-2">
                            <div class="input-group mb-3">
                                <div class="input-group-prepend">
                                    <label class="input-group-text" for="inputGroupSelect01">当前帧</label>
                                </div>
                                <select class="custom-select" id="inputGroupSelect01" style="width:150px;" @bind="CurrentFrame">
                                    @for (int i = 0; i < Frames.Count; i++)
                                    {
                                        var index = i;
                                        if (index == 0)
                                        {
                                            <option value="@Frames[index]">@Frames[index]</option>
                                        }
                                        else
                                        {
                                            <option value="@Frames[index]">@Frames[index]</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="p-2">
                            <div class="input-group mb-3">
                                <div class="input-group-prepend">
                                    <label class="input-group-text" for="inputGroupSelect01">角色耳朵</label>
                                </div>
                                <select class="custom-select" id="inputGroupSelect01" style="width:150px;" @onchange="ChangeEar">
                                    @{
                                        var names = (EarType[])Enum.GetValues(typeof(EarType));
                                        @for (int i = 0; i < names.Length; i++)
                                        {
                                            var index = i;
                                            <option value="@((int)names[index])">@names[index].ToString()</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="p-2">
                    <div class="d-flex flex-row  mb-3  justify-content-center align-items-center">
                        <div class="p-2">
                            @*<FaceComponent></FaceComponent>*@
                        </div>
                        <div class="p-2">
                            <div class="d-flex flex-column  mb-3  justify-content-around align-items-center">
                                <div class="p-2">
                                    <BECanvas Width="150" Height="150" @ref="canvasReference"></BECanvas>
                                </div>
                                <div class="p-2">
                                    @if (loading)
                                    {
                                        <div class="d-flex flex-row  mb-3  justify-content-center align-items-center">
                                            <div class="p-2">
                                                <button type="button" class="btn btn-primary" disabled>播放帧动画</button>
                                            </div>
                                            <div class="p-2">
                                                <button type="button" class="btn btn-primary" disabled>停止播放</button>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="d-flex flex-row  mb-3  justify-content-center align-items-center">
                                            <div class="p-2">
                                                <button type="button" class="btn btn-primary" @onclick="PlayAnimation">播放帧动画</button>
                                            </div>
                                            <div class="p-2">
                                                <button type="button" class="btn btn-danger" @onclick="StopAnimation">停止播放</button>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="p-2">
                            <BodyPartComponent Manager="HairManager"></BodyPartComponent>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
}


@code {

    #region Managers
    private IBodyComponentManager HairManager;
    #endregion

    #region Canvas
    private Canvas2DContext context;
    private BECanvasComponent canvasReference;
    #endregion

    #region 角色部位图片引用
    private ElementReference HeadRef;
    private ElementReference BodyRef;
    private ElementReference ArmRef;
    private ElementReference FaceRef;
    private ElementReference HandRef;
    private ElementReference EarRef;
    private ElementReference HairRef;
    private ElementReference HairOverHeadRef;
    private ElementReference HairBelowBodyRef;
    #endregion

    #region 后台数据
    private IList<int> Skins;
    private IList<string> Actions;
    private IList<int> Frames;
    #endregion

    private Character character;
    private int currentSkin;
    private string currentAction;
    private EarType currentEarType;

    #region 计时器相关
    private Timer anitimer;
    private Timer faceAniTimer;
    #endregion

    private int _currentFrame;
    private int _currentFaceFrame;

    private int CurrentFrame
    {
        get
        {
            return _currentFrame;
        }
        set
        {
            if (value > Frames.Count - 1) value = 0;
            _currentFrame = value;
            BrowserService.CurrentCharacter.CurrentFrame = _currentFrame.ToString();
            character = BrowserService.CurrentCharacter;
            StateHasChanged();
        }
    }

    private int CurrentFaceFrame
    {
        get
        {
            return _currentFaceFrame;
        }
        set
        {
            if (value > character.CurrentFaceMotion.FrameCount - 1) value = 0;
            _currentFaceFrame = value;
            BrowserService.CurrentCharacter.CurrentFaceFrame = _currentFaceFrame.ToString();
            character = BrowserService.CurrentCharacter;
            StateHasChanged();
        }
    }


    private bool IsInit => character == null || Skins == null || Actions == null || HairManager == null;
    private bool loading = true;

    protected async override Task OnInitializedAsync()
    {
        Notifier.Notify += OnNotify;
        HairManager = BrowserService.GetBodyComponentManager<Hair>();
        anitimer = new Timer(new TimerCallback(Animate), null, Timeout.Infinite, 60);
        Skins = await BrowserService.GetSkins();
        character = await BrowserService.GetDefaultCharacter();
        currentSkin = character.Id;
        currentAction = character.CurrentHeadMotion.Name;
        faceAniTimer = new Timer(new TimerCallback(FaceAnimate), null, 100, character.FaceDelay);
        await RefreshDataAsync();
    }

    private async Task OnNotify(string key, int value)
    {
        await InvokeAsync(async () =>
        {
            await RefreshDataAsync();
            StateHasChanged();
        });
    }

    protected async Task RefreshDataAsync()
    {
        loading = true;
        StopAnimation();
        Actions = await BrowserService.GetActions(character.Id);
        character = await BrowserService.GetCharacterAsync(currentSkin, currentAction, 0);
        Frames = character.CurrentBodyMotion.Actions.Keys.Select(key => int.Parse(key)).ToList();
        CurrentFrame = 0;
        CurrentFaceFrame = 0;
        character.EarType = currentEarType;
        character.CurrentHairMotion = BrowserService.CurrentHair.Motion;
        PlayAnimation();
        loading = false;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (character == null) return;
        character.CurrentFaceMotion = BrowserService.CurrentFace.FaceMotion;
        await BuildCanvas();
    }

    #region 换装相关函数
    private async Task ChangeSkin(ChangeEventArgs eventArgs)
    {
        currentSkin = int.Parse(eventArgs.Value.ToString());
        await RefreshDataAsync();
    }
    private async Task ChangeAction(ChangeEventArgs eventArgs)
    {
        currentAction = eventArgs.Value.ToString();
        await RefreshDataAsync();
    }
    private async Task ChangeEar(ChangeEventArgs eventArgs)
    {
        currentEarType = (EarType)(int.Parse(eventArgs.Value.ToString()));
        await RefreshDataAsync();
    }
    #endregion

    private async Task BuildCanvas()
    {
        if (context == null)
        {
            context = await canvasReference.CreateCanvas2DAsync();
            await context.SetTextAlignAsync(TextAlign.Center);
            await context.SetTextBaselineAsync(TextBaseline.Middle);
        }

        await context.ClearRectAsync(0, 0, 150, 150);

        if (loading)
        {
            await context.FillTextAsync("Loading...", 75, 75);
            return;
        }

        Point drawPosition;

        if (character.HairBelowBody != null)
        {
            drawPosition = CalculateDrawPosition(character.HairBelowBodyPosition, character.HairBelowBody);
            await context.DrawImageAsync(HairBelowBodyRef, drawPosition.X, drawPosition.Y);
        }

        drawPosition = CalculateDrawPosition(character.BodyPosition, character.Body);
        await context.DrawImageAsync(BodyRef, drawPosition.X, drawPosition.Y);

        drawPosition = CalculateDrawPosition(character.HeadPosition, character.Head);
        await context.DrawImageAsync(HeadRef, drawPosition.X, drawPosition.Y);

        if (character.EarType != EarType.Normal)
        {
            drawPosition = CalculateDrawPosition(character.EarPosition, character.Ear);
            await context.DrawImageAsync(EarRef, drawPosition.X, drawPosition.Y);
        }
        if (character.HasFace)
        {
            drawPosition = CalculateDrawPosition(character.FacePosition, character.Face);
            await context.DrawImageAsync(FaceRef, drawPosition.X, drawPosition.Y);
        }
        if (character.Hair != null)
        {
            drawPosition = CalculateDrawPosition(character.HairPosition, character.Hair);
            await context.DrawImageAsync(HairRef, drawPosition.X, drawPosition.Y);
        }
        if (character.HairOverHead != null)
        {
            drawPosition = CalculateDrawPosition(character.HairOverHeadPosition, character.HairOverHead);
            await context.DrawImageAsync(HairOverHeadRef, drawPosition.X, drawPosition.Y);
        }
        if (character.Arm != null)
        {
            drawPosition = CalculateDrawPosition(character.ArmPosition, character.Arm);
            await context.DrawImageAsync(ArmRef, drawPosition.X, drawPosition.Y);
        }
        if (character.Hand != null)
        {
            drawPosition = CalculateDrawPosition(character.HandPosition, character.Hand);
            await context.DrawImageAsync(HandRef, drawPosition.X, drawPosition.Y);
        }

    }

    private Point CalculateDrawPosition(Point srcPosition, CharacterConfig config)
    {
        var x = srcPosition.X - config.Origin.X;
        var y = srcPosition.Y - config.Origin.Y;
        return new Point(x, y);
    }


    #region 动画相关
    private void PlayAnimation()
    {
        anitimer.Change(0, character.BodyDelay);
    }
    private void StopAnimation()
    {
        anitimer.Change(Timeout.Infinite, character.BodyDelay);
    }
    /// <summary>
    ///计时器回调
    /// </summary>
    private void Animate(object value)
    {
        InvokeAsync(() =>
        {
            CurrentFrame++;
        });
    }
    private void FaceAnimate(object value)
    {
        InvokeAsync(() =>
        {
            if (character == null) return;

            CurrentFaceFrame++;
            if (CurrentFaceFrame == character.CurrentFaceMotion.FrameCount - 1)
            {
                CurrentFaceFrame++;
                faceAniTimer.Change(1500, character.FaceDelay);
            }
        });
    }
    #endregion

    public void Dispose()
    {
        anitimer.Change(Timeout.Infinite, 100);
        faceAniTimer.Change(Timeout.Infinite, 100);
        Notifier.Notify -= OnNotify;
    }
}
