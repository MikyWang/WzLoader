@using WzWeb.Client.Services;
@using WzWeb.Shared
@inject HttpClient Http
@inject IBrowserService BrowserService


@if (searchNodes == null)
{
    <Loading></Loading>
}
else
{
    if (nodes.Count > 0)
    {
        <div class="col-md-3">
            <div class="card">
                <div class="card-header">
                    <form class="form row">
                        <input class="form-control" type="search" placeholder="搜索节点" aria-label="Search" value=@nodeText @oninput="SearchNode">
                    </form>
                </div>
                <FixedHeightTemplate Percentage="72">
                    <Body>
                        <div class="card-body " style="padding:0rem">
                            <div class="list-group list-group-flush">
                                @foreach (var node in searchNodes)
                                {
                                    <div class="list-group-item">
                                        <NodeLink CurrentNode="@node"></NodeLink>
                                    </div>
                                }
                            </div>
                        </div>
                    </Body>
                </FixedHeightTemplate>
            </div>
        </div>
    }
}




@code{
    [Parameter]
    public Node CurrentNode { get; set; }

    private string nodeText;

    private List<Node> nodes = new List<Node>();
    private List<Node> searchNodes;

    private int height = 56; //56为导航条高度

    private GetNodeListRequest request;
    private bool hasNext;

    protected override async Task OnInitializedAsync()
    {

        request = new GetNodeListRequest { Node = CurrentNode, Start = 0, Num = 50 };
        var content = await Http.PostAsJsonAsync<GetNodeListRequest>("Maple/GetNodeList", request);
        var response = await content.Content.ReadFromJsonAsync<GetNodeListResponse>();
        hasNext = response.HasNext;
        nodes.AddRange(response.Nodes);
        searchNodes = nodes;

        var config = BrowserService.Config;
        height = config.InnerHeight - height;
    }

    private void SearchNode(ChangeEventArgs e)
    {
        nodeText = e.Value.ToString();
        if (String.IsNullOrEmpty(nodeText))
        {
            searchNodes = nodes;
            return;
        }
        searchNodes = nodes.FindAll(node => node.Text.ToLower().Contains(nodeText.ToLower()));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (hasNext)
        {
            request.Start += request.Num;
            var content = await Http.PostAsJsonAsync<GetNodeListRequest>("Maple/GetNodeList", request);
            var response = await content.Content.ReadFromJsonAsync<GetNodeListResponse>();
            nodes.AddRange(response.Nodes);
            searchNodes = nodes;
            hasNext = response.HasNext;
            StateHasChanged();
        }
    }
}