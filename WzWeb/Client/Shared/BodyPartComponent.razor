@inject INotifierService Notifier

@if (componentList == null)
{
    <Loading></Loading>
}
else
{
    <SearchListWithPageTemplate @bind-CurrentItems="componentList" @bind-CurrentPage="Manager.CurrentPage" CalculatePage="CalculatePage" GetItems="GetItems" PageCount="Manager.PageCount" Search="Search" SearchFromServer="SearchFromServer">
        <ItemTemplate Context="component">
            <div class="list-group-item list-group-item-action d-flex flex-row justify-content-around align-items-center @(IsActive(component))" @onclick="(async(e)=>{await ChooseComponent(component);})">
                <div class="p-2">
                    @{
                            var pngInfo = BodyComponentBase.GetActuallyComponent(component).DefaultPngInfo;
                        <img src="data:image/png;base64,@(pngInfo.Base64Data)" class="card-img" alt="..." width="@($"{pngInfo.Width}px")" height="@($"{pngInfo.Width}px")">
                    }
                </div>
                <div>
                    <h5 class="card-title">@component.ID</h5>
                    <p class="card-text">@component.Name</p>
                </div>
            </div>
        </ItemTemplate>
    </SearchListWithPageTemplate>
}

@code {

    [Parameter]
    public IBodyComponentManager Manager { get; set; }

    private IDictionary<int, BodyComponent> componentList;

    private Func<BodyComponent, string> IsActive => (BodyComponent comp) => comp.ID == Manager.Current?.ID ? "active" : string.Empty;
    private int CurrentPage => Manager.CurrentPage;
    private int PageItemCount => Manager.PageItemCount;
    private int CurrentPageIndex => (CurrentPage - 1) * PageItemCount;

    protected async override Task OnInitializedAsync()
    {
        componentList = await Manager.GetBodyComponentList(30);
    }

    private async Task ChooseComponent(BodyComponent component)
    {
        Manager.Current = component;
        StateHasChanged();
        await Notifier.Update();
    }

    private async Task CalculatePage()
    {
        await InvokeAsync(() =>
        {
            componentList = Manager.Components.Skip(CurrentPageIndex).Take(PageItemCount).ToDictionary(item => item.Key, item => item.Value);
            if (Manager.PageEnoughed) return;
            _ = GetItems();
        });
    }

    private async Task GetItems()
    {
        if (!Manager.HasNext) return;
        await Manager.GetBodyComponentList(Manager.PageItemCount);
    }

    private Task Search(string searchText)
    {
        return null;
    }

    private Task SearchFromServer(string searchText)
    {
        return null;
    }

}
