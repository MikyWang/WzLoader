@using System.Threading
@inject INotifierService Notifier
@implements IDisposable

@if (searchFaces == null)
{
    <Loading></Loading>
}
else
{
    <div class="card">
        <div class="card-header">
            <form class="form-inline">
                <input class="form-control mr-sm-2" type="search" placeholder="搜索脸型" value="@searchText" aria-label="Search" @oninput="Search" style="width:10rem">
                <button class="btn btn-success my-2 my-sm-0" type="button" @onclick="SearchFromServer">全局搜索</button>
            </form>
        </div>
        <FixedHeightTemplate Percentage="50">
            <div class="card-body " style="padding:0rem">
                <div class="list-group list-group-flush">
                    @foreach (var face in searchFaces)
                    {
                        <FaceItem CurrentFace="face"></FaceItem>
                    }
                </div>
            </div>
        </FixedHeightTemplate>
    </div>
    <PageComponent PageCount="pageCount"></PageComponent>
}



@code {

    [Parameter]
    public Face CurrentFace { get; set; }

    private bool hasNext = true;
    private string searchText;

    private int pageCount;
    private int currentPageIndex;
    private int pageItemCount = 10;

    private Timer timer;

    private IList<Face> searchFaces;

    protected async override Task OnInitializedAsync()
    {
        Notifier.Notify += OnNotify;

        var response = await BrowserService.GetFaces(50);
        hasNext = response.HasNext;
        calculatePage();
        //timer = new Timer(new TimerCallback(state => GetFaces(state)), null, 100, 5000);
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);
    }

    private void calculatePage()
    {
        pageCount = BrowserService.Faces.Count / 10;
        currentPageIndex = (BrowserService.CurrentFaceListPageNum - 1) * pageItemCount;
        searchFaces = BrowserService.Faces.Skip(currentPageIndex).Take(pageItemCount).ToList();
    }

    private async Task OnNotify(string key, int value)
    {
        await InvokeAsync(() =>
        {
            calculatePage();
            StateHasChanged();
        });
    }

    private async Task GetFaces(object state)
    {
        if (!hasNext)
        {
            timer.Change(Timeout.Infinite, 2000);
            return;
        }
        var response = await BrowserService.GetFaces(200);
        searchFaces = BrowserService.Faces;
        hasNext = response.HasNext;
        StateHasChanged();
    }

    private void ChooseFace()
    {

    }

    private void Search()
    {

    }

    private void SearchFromServer()
    {

    }
    public void Dispose()
    {
        timer?.Change(Timeout.Infinite, 100);
        Notifier.Notify -= OnNotify;
    }

}
