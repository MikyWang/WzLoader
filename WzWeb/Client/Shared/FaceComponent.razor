@using WzWeb.Client.Services;
@using WzWeb.Shared
@using WzWeb.Shared.Character
@using System.Threading
@inject IBrowserService BrowserService

@if (searchFaces == null)
{
    <Loading></Loading>
}
else
{
    <div class="card">
        <div class="card-header">
            <form class="form row">
                @if (hasNext)
                {
                    <input class="form-control" type="search" placeholder="正在加载..." aria-label="Search" readonly>
                }
                else
                {
                    <input class="form-control" type="search" placeholder="搜索节点" aria-label="Search" value=@searchText @oninput="Search">
                }

            </form>
        </div>
        <FixedHeightTemplate Percentage="50">
            <div class="card-body " style="padding:0rem">
                <div class="list-group list-group-flush">
                    @foreach (var face in searchFaces)
                    {
                        var pngInfo = face.FaceMotion.Actions["0"]["face"].PngInfo;

                        <div class="list-group-item list-group-item-action d-flex flex-row justify-content-around align-items-center" @onclick="ChooseFace">
                            <div class="p-2">
                                <img src="data:image/png;base64,@(pngInfo.Base64Data)" class="card-img" alt="..." width="@($"{pngInfo.Width}px")" height="@($"{pngInfo.Width}px")">
                            </div>
                            <div>
                                <p class="card-title">@face.FaceId</p>
                                <p class="card-text">@face.FaceName</p>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </FixedHeightTemplate>
    </div>
}



@code {

    [Parameter]
    public Face CurrentFace { get; set; }

    private bool hasNext = true;
    private string searchText;

    private Timer timer;

    private IList<Face> searchFaces;

    protected async override Task OnInitializedAsync()
    {
        var response = await BrowserService.GetFaces(1);
        searchFaces = BrowserService.Faces;
        hasNext = response.HasNext;
        timer = new Timer(new TimerCallback(state => GetFaces(state)), null, 0, 5000);
    }

    private async Task GetFaces(object state)
    {
        if (!hasNext)
        {
            timer.Change(Timeout.Infinite, 2000);
            return;
        }
        var response = await BrowserService.GetFaces(200);
        searchFaces = BrowserService.Faces;
        hasNext = response.HasNext;
        StateHasChanged();
    }

    private void ChooseFace()
    {

    }

    private void Search()
    {

    }

}
