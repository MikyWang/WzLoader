@using WzWeb.Shared
@inject HttpClient Http

@if (fileInfo == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <dl class="row border">
        <dt class="col-sm-5">Signature</dt>
        <dd class="col-sm-7">@fileInfo.Signature</dd>
        <dt class="col-sm-5">Copyright</dt>
        <dd class="col-sm-7">@fileInfo.Copyright</dd>
        <dt class="col-sm-5">DataSize</dt>
        <dd class="col-sm-7">@fileInfo.DataSize</dd>
        <dt class="col-sm-5">EncryptedVersion</dt>
        <dd class="col-sm-7">@fileInfo.EncryptedVersion</dd>
        <dt class="col-sm-5">FileName</dt>
        <dd class="col-sm-7">@fileInfo.FileName</dd>
        <dt class="col-sm-5">FileSize</dt>
        <dd class="col-sm-7">@fileInfo.FileSize</dd>
        <dt class="col-sm-5">HeaderSize</dt>
        <dd class="col-sm-7">@fileInfo.HeaderSize</dd>
        <dt class="col-sm-5">ImageCount</dt>
        <dd class="col-sm-7">@fileInfo.ImageCount</dd>
        <dt class="col-sm-5">TextEncoding</dt>
        <dd class="col-sm-7">@fileInfo.TextEncoding</dd>
        <dt class="col-sm-5">VersionChecked</dt>
        <dd class="col-sm-7">@fileInfo.VersionChecked</dd>

        @RenderInfo("test", "Value");
    </dl>


}


@code {

    [Parameter]
    public Node CurrentNode { get; set; }

    private FileInfo fileInfo;

    protected override async Task OnInitializedAsync()
    {

        var resp = await Http.PostAsJsonAsync<Node>("Maple/GetFileInfo", CurrentNode);
        fileInfo = await resp.Content.ReadFromJsonAsync<FileInfo>();
    }

    private string RenderInfo(string name, string info)
    {
        return "<dt>@name</dt> <dd>@info</dd>";
    }

}

