@inject INotifierService Notifier

@if (PageCount == 0)
{
    @*<Loading></Loading>*@
}

else
{
    <nav aria-label="...">
        <ul class="pagination pagination-lg justify-content-center">
            <li class="page-item @PreviousDisabledClass">
                <a class="page-link" href="@(CommonStrings.EMPTY_LINK)" tabindex="-1" aria-disabled="true" aria-label="Previous" @onclick="Previous">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>
            @{
                for (int i = middlePage - 1; i <= middlePage + 1; i++)
                {
                    var cp = i;
                    if (cp == 0 || cp > PageCount) continue;
                    var item = new PageItemModel
                    {
                        PageNum = cp,
                        Active = cp == CurrentPage
                    };
                    if (item.Active)
                    {
                        <li class="page-item active" aria-current="page">
                            <a class="page-link" href="@(CommonStrings.EMPTY_LINK)" @onclick="()=> ChangePage(item.PageNum)">@item.PageNum <span class="sr-only">(current)</span></a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item"><a class="page-link" href="@(CommonStrings.EMPTY_LINK)" @onclick="()=>ChangePage(item.PageNum)">@item.PageNum</a></li>
                    }
                }
            }
            <li class="page-item @NextDisabledClass">
                <a class="page-link" href="@(CommonStrings.EMPTY_LINK)" aria-label="Next" @onclick="Next">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
        </ul>
    </nav>
}

@code {

    [Parameter]
    public int PageCount { get; set; }

    [Parameter]
    public int CurrentPage { get; set; }
    [Parameter]
    public EventCallback<int> CurrentPageChanged { get; set; }

    private int middlePage;

    #region 禁用标识
    private bool PreviousDisabled => middlePage == 2;
    private string PreviousDisabledClass => PreviousDisabled ? "disabled" : string.Empty;
    private bool NextDisabled => middlePage == PageCount - 1;
    private string NextDisabledClass => NextDisabled ? "disabled" : string.Empty;
    #endregion

    protected async override Task OnInitializedAsync()
    {
        await InvokeAsync(() =>
        {
            CalculatePage();
        });

    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await InvokeAsync(() =>
        {
            CalculatePage();
        });
    }

    private void CalculatePage()
    {
        middlePage = CurrentPage;
        if (middlePage <= 1) middlePage++;
        if (middlePage == PageCount) middlePage--;
    }

    private async Task Previous()
    {
        CurrentPage--;
        await CurrentPageChanged.InvokeAsync(CurrentPage);
        await Notifier.Update();
    }

    private async Task Next()
    {
        CurrentPage++;
        await CurrentPageChanged.InvokeAsync(CurrentPage);
        await Notifier.Update();
    }

    private async Task ChangePage(int page)
    {
        await CurrentPageChanged.InvokeAsync(page);
        StateHasChanged();
        await Notifier.Update();
    }

}
